basePath: /api/v1
definitions:
  models.APIResponse:
    properties:
      data: {}
      error: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  models.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.UserResponse'
    type: object
  models.CreateUserRequest:
    properties:
      email:
        example: johndoe@example.com
        type: string
      first_name:
        example: John
        maxLength: 50
        minLength: 1
        type: string
      last_name:
        example: Doe
        maxLength: 50
        minLength: 1
        type: string
      password:
        example: password123
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - user
        example: user
        type: string
      username:
        example: johndoe
        maxLength: 20
        minLength: 3
        type: string
    required:
    - email
    - first_name
    - last_name
    - password
    - role
    - username
    type: object
  models.LoginRequest:
    properties:
      email:
        example: johndoe@example.com
        type: string
      password:
        example: password123
        type: string
    required:
    - email
    - password
    type: object
  models.PaginatedUserResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.UserResponse'
        type: array
      limit:
        example: 10
        type: integer
      page:
        example: 1
        type: integer
      total:
        example: 100
        type: integer
      total_pages:
        example: 10
        type: integer
    type: object
  models.UpdateUserRequest:
    properties:
      email:
        example: johndoe_new@example.com
        type: string
      first_name:
        example: John
        maxLength: 50
        minLength: 1
        type: string
      is_active:
        example: true
        type: boolean
      last_name:
        example: Doe
        maxLength: 50
        minLength: 1
        type: string
      role:
        enum:
        - admin
        - user
        example: user
        type: string
      username:
        example: johndoe
        maxLength: 20
        minLength: 3
        type: string
    type: object
  models.UserResponse:
    properties:
      created_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      email:
        example: johndoe@example.com
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 63a5e3e3e4b0a7e3e3e3e3e3
        type: string
      is_active:
        example: true
        type: boolean
      last_name:
        example: Doe
        type: string
      role:
        example: user
        type: string
      updated_at:
        example: "2023-01-01T12:00:00Z"
        type: string
      username:
        example: johndoe
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A template for building RESTful APIs in Go using the Gin framework
    with a layered architecture.
  title: Go Gin Layered Architecture API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user and get a JWT token
      parameters:
      - description: User Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.AuthResponse'
              type: object
        "400":
          description: Validation failed or invalid request
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                error:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "401":
          description: Invalid credentials or inactive user
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Login a user
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Create a new user account
      parameters:
      - description: User Registration Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.AuthResponse'
              type: object
        "400":
          description: Validation failed or invalid request
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                error:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIResponse'
      summary: Register a new user
      tags:
      - auth
  /users:
    get:
      description: Get a paginated list of all users (Admin only)
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            $ref: '#/definitions/models.PaginatedUserResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user (Admin only)
      parameters:
      - description: New User Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User created successfully
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserResponse'
              type: object
        "400":
          description: Validation failed or invalid request
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                error:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "409":
          description: User already exists
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete a user by their ID (Admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/models.APIResponse'
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      description: Get a single user by their ID (Admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserResponse'
              type: object
        "400":
          description: Invalid user ID
          schema:
            $ref: '#/definitions/models.APIResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update an existing user's details by ID (Admin only)
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Update Info
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserResponse'
              type: object
        "400":
          description: Validation failed or invalid request
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                error:
                  additionalProperties:
                    type: string
                  type: object
              type: object
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - users
  /users/profile:
    get:
      description: Get the profile of the currently authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: Profile retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/models.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/models.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.APIResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/models.APIResponse'
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
